{"version":3,"sources":["components/intro.jsx","components/loveU.jsx","App.js","serviceWorker.js","index.js"],"names":["Intro","state","react_default","a","createElement","class","className","aria-hidden","Component","LoveU","App","step","handleClick","_this","setState","role","this","intro","loveU","type","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAwBeA,6MArBbC,MAAQ,2EAEN,OACEC,EAAAC,EAAAC,cAAA,OAAKC,MAAM,aACTH,EAAAC,EAAAC,cAAA,MAAIE,UAAU,iBAAd,sBACAJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,QAAb,kFAEOJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,kBAAkBC,cAAY,SAChDL,EAAAC,EAAAC,cAAA,KAAGE,UAAU,kBAAkBC,cAAY,SAH7C,iBAKEL,EAAAC,EAAAC,cAAA,KAAGE,UAAU,kBAAkBC,cAAY,SAC3CL,EAAAC,EAAAC,cAAA,KAAGE,UAAU,kBAAkBC,cAAY,SAC3CL,EAAAC,EAAAC,cAAA,WAPF,uDAQuD,IACrDF,EAAAC,EAAAC,cAAA,KAAGE,UAAU,gBAAgBC,cAAY,kBAf/BC,aC6BLC,6MA5BbR,MAAQ,2EAEN,OACEC,EAAAC,EAAAC,cAAA,OAAKC,MAAM,aACTH,EAAAC,EAAAC,cAAA,wDACAF,EAAAC,EAAAC,cAAA,KAAGC,MAAM,QAAT,kEACmD,IACjDH,EAAAC,EAAAC,cAAA,KAAGC,MAAM,cAAcE,cAAY,SACnCL,EAAAC,EAAAC,cAAA,WAHF,yHAKmD,IACjDF,EAAAC,EAAAC,cAAA,KAAGC,MAAM,cAAcE,cAAY,SACnCL,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,KAAGC,MAAM,cAAcE,cAAY,SACnCL,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,KAAGC,MAAM,cAAcE,cAAY,SACnCL,EAAAC,EAAAC,cAAA,KAAGC,MAAM,cAAcE,cAAY,SAXrC,iFAaEL,EAAAC,EAAAC,cAAA,KAAGC,MAAM,cAAcE,cAAY,SACnCL,EAAAC,EAAAC,cAAA,KAAGC,MAAM,cAAcE,cAAY,SACnCL,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,gDAtBUI,aC6BLE,oNAzBbT,MAAQ,CAAEU,KAAM,KAEhBC,YAAc,WACZ,IAAMD,EAAOE,EAAKZ,MAAMU,KAAO,EAC/BE,EAAKC,SAAS,CAAEH,kFAIhB,OACET,EAAAC,EAAAC,cAAA,QAAMW,KAAK,OAAOV,MAAM,eACD,IAApBW,KAAKf,MAAMU,KAAaT,EAAAC,EAAAC,cAACa,EAAD,MAAYf,EAAAC,EAAAC,cAACc,EAAD,MACrChB,EAAAC,EAAAC,cAAA,KAAGC,MAAM,QACPH,EAAAC,EAAAC,cAAA,UACEe,KAAK,SACLb,UAAU,kBACVc,QAASJ,KAAKJ,aAHhB,gCAbQJ,0BCOEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.db171ae9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Intro extends Component {\n  state = {};\n  render() {\n    return (\n      <div class=\"jumbotron\">\n        <h1 className=\"cover-heading\">Desculpa amorzinho</h1>\n        <p className=\"lead\">\n          Me perdoa meu anjinho... Me perdoa por ser um babaca com você... Eu te\n          amo, <i className=\"fa fa-heartbeat\" aria-hidden=\"true\" />\n          <i className=\"fa fa-heartbeat\" aria-hidden=\"true\" />\n          minha coalinha\n          <i className=\"fa fa-heartbeat\" aria-hidden=\"true\" />\n          <i className=\"fa fa-heartbeat\" aria-hidden=\"true\" />\n          <br />\n          Perdoa esse idiota que te ama mais que tudo na vida.{\" \"}\n          <i className=\"fa fa-frown-o\" aria-hidden=\"true\" />\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Intro;\n","import React, { Component } from \"react\";\n\nclass LoveU extends Component {\n  state = {};\n  render() {\n    return (\n      <div class=\"jumbotron\">\n        <h1>Eu te amo mais que tudo no mundo amor !!!!</h1>\n        <p class=\"lead\">\n          Você é, e sempre será, a alegria do meu coração.{\" \"}\n          <i class=\"fa fa-heart\" aria-hidden=\"true\" />\n          <br />\n          Você é simplismente a pessoa perfeita para mim, se existem 7\n          maravilhas do mundo, seu sorriso é minha oitava.{\" \"}\n          <i class=\"fa fa-heart\" aria-hidden=\"true\" />\n          <br />\n          <i class=\"fa fa-heart\" aria-hidden=\"true\" />\n          <br />\n          <i class=\"fa fa-heart\" aria-hidden=\"true\" />\n          <i class=\"fa fa-heart\" aria-hidden=\"true\" />\n          Você é a história de amor mais linda que o destino escreveu para mim.\n          <i class=\"fa fa-heart\" aria-hidden=\"true\" />\n          <i class=\"fa fa-heart\" aria-hidden=\"true\" />\n          <br />\n          <h3> Eu Te Amo, Ana Flávia</h3>\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default LoveU;\n","import React, { Component } from \"react\";\nimport Intro from \"./components/intro\";\nimport LoveU from \"./components/loveU\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { step: 1 };\n\n  handleClick = () => {\n    const step = this.state.step + 1;\n    this.setState({ step });\n  };\n\n  render() {\n    return (\n      <main role=\"main\" class=\"inner cover\">\n        {this.state.step === 1 ? <Intro /> : <LoveU />}\n        <p class=\"lead\">\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            onClick={this.handleClick}\n          >\n            Clique para perdoar\n          </button>\n        </p>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"font-awesome/css/font-awesome.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}